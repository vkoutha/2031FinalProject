-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 09F0;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8094;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8076;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9000;  -- 	IN     SWITCHES
           009 : 980A;  -- 	OUT    BEEP
           00A : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00B : 4A09;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00C : 3812;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00D : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00E : 4A06;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00F : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           010 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           011 : 2808;  -- 	JUMP   WaitForSafety
           012 : B800;  -- 	LOADI  0
           013 : 980A;  -- 	OUT    BEEP
           014 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           015 : 4A06;  -- 	AND    Mask1
           016 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           017 : 11D5;  -- 	STORE  Temp        ; (overkill, but looks nice)
           018 : 6001;  -- 	SHIFT  1
           019 : 51D5;  -- 	OR     Temp
           01A : 9807;  -- 	OUT    XLEDS
           01B : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01C : 4A07;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01D : 3812;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01E : 09F0;  -- 	LOAD   Zero
           01F : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           020 : 98C3;  -- 	OUT		RESETPOS    ; reset odometer in case wheels moved after programming
           021 : B800;  -- 	LOADI 0
           022 : 1196;  -- 	STORE a1
           023 : 1198;  -- 	STORE b1
           024 : B830;  -- 	LOADI 48
           025 : 1199;  -- 	STORE b2
           026 : 1197;  -- 	STORE a2
           027 : 818C;  -- 	CALL DegCalc
           028 : 099A;  -- 	LOAD degValue
           029 : 105C;  -- 	STORE TurnDegreesAmt
           02A : 0A18;  -- 	LOAD FSlow
           02B : 105D;  -- 	STORE TurnDegreesSpeedP
           02C : 0A19;  -- 	LOAD RSlow
           02D : 105E;  -- 	STORE TurnDegreesSpeedN
           02E : 804A;  -- 	CALL TurnDegrees
           02F : 819C;  -- 	CALL DistCalc
           030 : 099B;  -- 	LOAD distValue
           031 : 1048;  -- 	STORE MoveDistanceAmt
           032 : 0A1A;  -- 	LOAD FMid
           033 : 1049;  -- 	STORE MoveDistanceSpeed
           034 : 806E;  -- 	CALL Wait1
           035 : 8037;  -- 	CALL MoveDistance
           036 : 8066;  -- 	CALL Die
           037 : 0000;  -- 	ConvertedUnits: DW 0
           038 : 0848;  -- 	LOAD MoveDistanceAmt
           039 : 805F;  -- 	CALL InchesToRobotUnits ; Convert MoveDistanceAMT from inches to robot units
           03A : 1037;  -- 	STORE ConvertedUnits ; Store the target distance (robot units) in ConvertedUnits field
           03B : 0837;  -- 	LOAD ConvertedUnits
           03C : 9804;  -- 	OUT SSEG1	
           03D : 9805;  -- 	OUT SSEG2
           03E : 0849;  -- 	LOAD MoveDistanceSpeed
           03F : 9883;  -- 	OUT LVELCMD
           040 : 988B;  -- 	OUT RVELCMD
           041 : 90C0;  -- 	IN XPos
           042 : 2037;  -- 	SUB ConvertedUnits
           043 : 303B;  -- 	JNEG MoveDistanceSetSpeed
           044 : 09F0;  -- 	LOAD Zero
           045 : 9883;  -- 	OUT LVELCMD
           046 : 988B;  -- 	OUT RVELCMD
           047 : 8800;  -- 	RETURN
           048 : 0000;  -- MoveDistanceAmt: DW 0 ; Distance (in inches) to move for MoveDistance subroutine
           049 : 0000;  -- MoveDistanceSpeed: DW 0 ; Speed to move at for MoveDistance subroutine
           04A : 085C;  -- 	LOAD TurnDegreesAmt
           04B : 3051;  -- 	JNEG TDNegAngle
           04C : 085D;  -- 	LOAD TurnDegreesSpeedP
           04D : 988B;  -- 	OUT RVELCMD
           04E : 085E;  -- 	LOAD TurnDegreesSpeedN
           04F : 9883;  -- 	OUT LVELCMD
           050 : 2855;  -- 	JUMP TDCompare
           051 : 085E;  -- 	LOAD TurnDegreesSpeedN
           052 : 988B;  -- 	OUT RVELCMD
           053 : 085D;  -- 	LOAD TurnDegreesSpeedP
           054 : 9883;  -- 	OUT LVELCMD
           055 : 90C2;  -- 	IN Theta
           056 : 205C;  -- 	SUB TurnDegreesAmt
           057 : 304A;  -- 	JNEG TurnDegrees
           058 : 09F0;  -- 	LOAD Zero
           059 : 9883;  -- 	OUT LVELCMD
           05A : 988B;  -- 	OUT RVELCMD
           05B : 8800;  -- 	RETURN
           05C : 0000;  -- TurnDegreesAmt: DW 0 ; Distance (in inches) to move for MoveDistance subroutine
           05D : 0000;  -- TurnDegreesSpeedP: DW 0 ; Speed to move at for MoveDistance subroutine
           05E : 0000;  -- TurnDegreesSpeedN: DW 0 ; Speed to move at for MoveDistance subroutine
           05F : 113F;  -- 	STORE m16sA
           060 : 09F0;  -- 	LOAD Zero
           061 : 6819;  -- 	ADDI 25
           062 : 1140;  -- 	STORE m16sB
           063 : 811C;  -- 	CALL Mult16s
           064 : 0943;  -- 	LOAD mres16sL
           065 : 8800;  -- 	RETURN
           066 : 09F0;  -- 	LOAD   Zero         ; Stop everything.
           067 : 9883;  -- 	OUT    LVELCMD
           068 : 988B;  -- 	OUT    RVELCMD
           069 : 98B2;  -- 	OUT    SONAREN
           06A : 086D;  -- 	LOAD   DEAD         ; An indication that we are dead
           06B : 9805;  -- 	OUT    SSEG2
           06C : 286C;  -- 	JUMP   Forever      ; Do this forever.
           06D : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           06E : 9802;  -- 	OUT    TIMER
           06F : 90C9;  -- 	IN     LIN
           070 : 9805;  -- 	OUT    SSEG2
           071 : 9002;  -- 	IN     TIMER
           072 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           073 : 6FFE;  -- 	ADDI   -2         ; 1 second in 10Hz.
           074 : 306F;  -- 	JNEG   Wloop
           075 : 8800;  -- 	RETURN
           076 : 808E;  -- 	CALL   GetBattLvl
           077 : 4076;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           078 : 221E;  -- 	SUB    MinBatt
           079 : 307C;  -- 	JNEG   DeadBatt
           07A : 1A1E;  -- 	ADD    MinBatt     ; get original value back
           07B : 8800;  -- 	RETURN
           07C : 09F5;  -- 	LOAD   Four
           07D : 980A;  -- 	OUT    BEEP        ; start beep sound
           07E : 808E;  -- 	CALL   GetBattLvl  ; get the battery level
           07F : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           080 : 9805;  -- 	OUT    SSEG2
           081 : 9806;  -- 	OUT    LCD
           082 : 09F0;  -- 	LOAD   Zero
           083 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           084 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           085 : 9807;  -- 	OUT    XLEDS
           086 : 806E;  -- 	CALL   Wait1       ; 1 second
           087 : 09F0;  -- 	Load   Zero
           088 : 980A;  -- 	OUT    BEEP        ; stop beeping
           089 : 09F0;  -- 	LOAD   Zero
           08A : 9801;  -- 	OUT    LEDS        ; LEDs off
           08B : 9807;  -- 	OUT    XLEDS
           08C : 806E;  -- 	CALL   Wait1       ; 1 second
           08D : 287C;  -- 	JUMP   DeadBatt    ; repeat forever
           08E : 0A20;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           08F : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           090 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           091 : 809C;  -- 	CALL   BlockI2C    ; wait for it to finish
           092 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           093 : 8800;  -- 	RETURN
           094 : 809C;  -- 	CALL   BlockI2C    ; wait for idle
           095 : 0A1F;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           096 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           097 : 09F0;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           098 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           099 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           09A : 809C;  -- 	CALL   BlockI2C    ; wait for it to finish
           09B : 8800;  -- 	RETURN
           09C : 09F0;  -- 	LOAD   Zero
           09D : 11D5;  -- 	STORE  Temp        ; Used to check for timeout
           09E : 09D5;  -- 	LOAD   Temp
           09F : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           0A0 : 11D5;  -- 	STORE  Temp
           0A1 : 40A5;  -- 	JZERO  I2CError    ; Timeout occurred; error
           0A2 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           0A3 : 389E;  -- 	JPOS   BI2CL       ; If not 0, try again
           0A4 : 8800;  -- 	RETURN             ; Else return
           0A5 : 09F0;  -- 	LOAD   Zero
           0A6 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           0A7 : 9804;  -- 	OUT    SSEG1
           0A8 : 9805;  -- 	OUT    SSEG2       ; display error message
           0A9 : 28A5;  -- 	JUMP   I2CError
           0AA : 0000;  -- DW 0 
           0AB : 0001;  -- DW 1 
           0AC : 0002;  -- DW 2  
           0AD : 0000;  -- INDX: DW 0 ; Index of the data to retrieve
           0AE : 0000;  -- Ptr: DW 0 ; Pointer at the correct address in the table
           0AF : 0000;  -- output: DW 0 ; the retrieved data will be stored here
           0B0 : B8AA;  -- LOADI  Table
           0B1 : 18AD;  -- ADD    INDX
           0B2 : 10AE;  -- STORE  Ptr 
           0B3 : 70AE;  -- ILOAD  Ptr 
           0B4 : 10AF;  -- STORE  output  	
           0B5 : 0917;  -- 	LOAD   AtanY
           0B6 : 817F;  -- 	CALL   Abs          ; abs(y)
           0B7 : 1119;  -- 	STORE  AtanT
           0B8 : 0916;  -- 	LOAD   AtanX        ; abs(x)
           0B9 : 817F;  -- 	CALL   Abs
           0BA : 2119;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0BB : 30C6;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0BC : 0916;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0BD : 30C3;  -- 	JNEG   A2_R3
           0BE : 80D7;  -- 	CALL   A2_calc      ; Octants 1, 8
           0BF : 30C1;  -- 	JNEG   A2_R1n
           0C0 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0C1 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0C2 : 8800;  -- 	RETURN
           0C3 : 80D7;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0C4 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0C5 : 8800;  -- 	RETURN
           0C6 : 0917;  -- 	LOAD   AtanY        ; Swap input arguments
           0C7 : 1119;  -- 	STORE  AtanT
           0C8 : 0916;  -- 	LOAD   AtanX
           0C9 : 1117;  -- 	STORE  AtanY
           0CA : 0919;  -- 	LOAD   AtanT
           0CB : 1116;  -- 	STORE  AtanX
           0CC : 38D2;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           0CD : 80D7;  -- 	CALL   A2_calc      ; else octants 6, 7
           0CE : 59EE;  -- 	XOR    NegOne
           0CF : 6801;  -- 	ADDI   1            ; negate the angle
           0D0 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           0D1 : 8800;  -- 	RETURN
           0D2 : 80D7;  -- 	CALL   A2_calc      ; Octants 2, 3
           0D3 : 59EE;  -- 	XOR    NegOne
           0D4 : 6801;  -- 	ADDI   1            ; negate the angle
           0D5 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           0D6 : 8800;  -- 	RETURN
           0D7 : 0917;  -- 	LOAD   AtanY
           0D8 : 1177;  -- 	STORE  d16sN        ; Y in numerator
           0D9 : 0916;  -- 	LOAD   AtanX
           0DA : 1178;  -- 	STORE  d16sD        ; X in denominator
           0DB : 8103;  -- 	CALL   A2_div       ; divide
           0DC : 097D;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0DD : 1118;  -- 	STORE  AtanRatio
           0DE : 113F;  -- 	STORE  m16sA
           0DF : 1140;  -- 	STORE  m16sB
           0E0 : 80FA;  -- 	CALL   A2_mult      ; X^2
           0E1 : 113F;  -- 	STORE  m16sA
           0E2 : 091A;  -- 	LOAD   A2c
           0E3 : 1140;  -- 	STORE  m16sB
           0E4 : 80FA;  -- 	CALL   A2_mult
           0E5 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           0E6 : 1178;  -- 	STORE  d16sD
           0E7 : 0918;  -- 	LOAD   AtanRatio
           0E8 : 1177;  -- 	STORE  d16sN        ; Ratio in numerator
           0E9 : 8103;  -- 	CALL   A2_div       ; divide
           0EA : 097D;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0EB : 113F;  -- 	STORE  m16sA        ; <= result in radians
           0EC : 091B;  -- 	LOAD   A2cd         ; degree conversion factor
           0ED : 1140;  -- 	STORE  m16sB
           0EE : 80FA;  -- 	CALL   A2_mult      ; convert to degrees
           0EF : 1119;  -- 	STORE  AtanT
           0F0 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           0F1 : 49F2;  -- 	AND    One
           0F2 : 40F7;  -- 	JZERO  A2_rdwn      ; round down
           0F3 : 0919;  -- 	LOAD   AtanT
           0F4 : 6018;  -- 	SHIFT  -8
           0F5 : 6801;  -- 	ADDI   1            ; round up
           0F6 : 8800;  -- 	RETURN
           0F7 : 0919;  -- 	LOAD   AtanT
           0F8 : 6018;  -- 	SHIFT  -8           ; round down
           0F9 : 8800;  -- 	RETURN
           0FA : 811C;  -- 	CALL   Mult16s
           0FB : 0944;  -- 	LOAD   mres16sH
           0FC : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           0FD : 1144;  -- 	STORE  mres16sH
           0FE : 0943;  -- 	LOAD   mres16sL
           0FF : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           100 : 4A0D;  -- 	AND    LowByte
           101 : 5144;  -- 	OR     mres16sH     ; combine high and low words of result
           102 : 8800;  -- 	RETURN
           103 : 09FA;  -- 	LOAD  Nine            ; loop 8 times (256 = 2^8)
           104 : 1119;  -- 	STORE  AtanT
           105 : 0919;  -- 	LOAD   AtanT
           106 : 6FFF;  -- 	ADDI   -1
           107 : 390A;  -- 	JPOS   A2_DN        ; not done; continue shifting
           108 : 8145;  -- 	CALL   Div16s       ; do the standard division
           109 : 8800;  -- 	RETURN
           10A : 1119;  -- 	STORE  AtanT
           10B : 0977;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           10C : 6001;  -- 	SHIFT  1
           10D : 5977;  -- 	XOR    d16sN        ; if the sign changed,
           10E : 3112;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           10F : 5977;  -- 	XOR    d16sN        ; get back shifted version
           110 : 1177;  -- 	STORE  d16sN
           111 : 2905;  -- 	JUMP   A2_DL
           112 : 0978;  -- 	LOAD   d16sD
           113 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           114 : 1178;  -- 	STORE  d16sD
           115 : 2905;  -- 	JUMP   A2_DL
           116 : 0000;  -- AtanX:      DW 0
           117 : 0000;  -- AtanY:      DW 0
           118 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           119 : 0000;  -- AtanT:      DW 0        ; temporary value
           11A : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           11B : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           11C : 09F0;  -- 	LOAD  Zero
           11D : 1141;  -- 	STORE  m16sc        ; clear carry
           11E : 1144;  -- 	STORE  mres16sH     ; clear result
           11F : 09FD;  -- 	LOAD  Sixteen       ; load 16 to counter
           120 : 1142;  -- 	STORE  mcnt16s      
           121 : 0941;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           122 : 4126;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           123 : 0944;  -- 	LOAD   mres16sH     ; if a carry, 
           124 : 193F;  -- 	ADD    m16sA        ; add multiplicand to result H
           125 : 1144;  -- 	STORE  mres16sH
           126 : 0940;  -- 	LOAD   m16sB
           127 : 49F2;  -- 	AND    One          ; check bit 0 of multiplier
           128 : 1141;  -- 	STORE  m16sc        ; save as next carry
           129 : 412D;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           12A : 0944;  -- 	LOAD   mres16sH     ; if bit 0 set,
           12B : 213F;  -- 	SUB    m16sA        ; subtract multiplicand from result H
           12C : 1144;  -- 	STORE  mres16sH
           12D : 0940;  -- 	LOAD   m16sB
           12E : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           12F : 493E;  -- 	AND    c7FFF        ; clear msb
           130 : 1140;  -- 	STORE  m16sB
           131 : 0944;  -- 	LOAD   mres16sH     ; load result H
           132 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           133 : 5140;  -- 	OR     m16sB
           134 : 1140;  -- 	STORE  m16sB        ; result L now includes carry out from H
           135 : 0944;  -- 	LOAD   mres16sH
           136 : 6011;  -- 	SHIFT  -1
           137 : 1144;  -- 	STORE  mres16sH     ; shift result H >>1
           138 : 0942;  -- 	LOAD   mcnt16s
           139 : 6FFF;  -- 	ADDI   -1           ; check counter
           13A : 3920;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           13B : 0940;  -- 	LOAD   m16sB
           13C : 1143;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           13D : 8800;  -- 	RETURN              ; Done
           13E : 7FFF;  -- c7FFF: DW &H7FFF
           13F : 0000;  -- m16sA: DW 0 ; multiplicand
           140 : 0000;  -- m16sB: DW 0 ; multipler
           141 : 0000;  -- m16sc: DW 0 ; carry
           142 : 0000;  -- mcnt16s: DW 0 ; counter
           143 : 0000;  -- mres16sL: DW 0 ; result low
           144 : 0000;  -- mres16sH: DW 0 ; result high
           145 : 09F0;  -- 	LOAD  Zero
           146 : 117E;  -- 	STORE  dres16sR     ; clear remainder result
           147 : 117B;  -- 	STORE  d16sC1       ; clear carry
           148 : 0977;  -- 	LOAD   d16sN
           149 : 5978;  -- 	XOR    d16sD
           14A : 1179;  -- 	STORE  d16sS        ; sign determination = N XOR D
           14B : 09FE;  -- 	LOAD   Seventeen
           14C : 117A;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           14D : 0978;  -- 	LOAD   d16sD
           14E : 817F;  -- 	CALL   Abs          ; take absolute value of denominator
           14F : 1178;  -- 	STORE  d16sD
           150 : 0977;  -- 	LOAD   d16sN
           151 : 817F;  -- 	CALL   Abs          ; take absolute value of numerator
           152 : 1177;  -- 	STORE  d16sN
           153 : 0977;  -- 	LOAD   d16sN
           154 : 601F;  -- 	SHIFT  -15          ; get msb
           155 : 49F2;  -- 	AND    One          ; only msb (because shift is arithmetic)
           156 : 117C;  -- 	STORE  d16sC2       ; store as carry
           157 : 0977;  -- 	LOAD   d16sN
           158 : 6001;  -- 	SHIFT  1            ; shift <<1
           159 : 517B;  -- 	OR     d16sC1       ; with carry
           15A : 1177;  -- 	STORE  d16sN
           15B : 097A;  -- 	LOAD   d16sT
           15C : 6FFF;  -- 	ADDI   -1           ; decrement counter
           15D : 416D;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           15E : 117A;  -- 	STORE  d16sT
           15F : 097E;  -- 	LOAD   dres16sR
           160 : 6001;  -- 	SHIFT  1            ; shift remainder
           161 : 517C;  -- 	OR     d16sC2       ; with carry from other shift
           162 : 2178;  -- 	SUB    d16sD        ; subtract denominator from remainder
           163 : 3168;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           164 : 117E;  -- 	STORE  dres16sR
           165 : 09F2;  -- 	LOAD   One
           166 : 117B;  -- 	STORE  d16sC1       ; set carry
           167 : 2953;  -- 	JUMP   Div16s_loop
           168 : 1978;  -- 	ADD    d16sD        ; add denominator back in
           169 : 117E;  -- 	STORE  dres16sR
           16A : 09F0;  -- 	LOAD   Zero
           16B : 117B;  -- 	STORE  d16sC1       ; clear carry
           16C : 2953;  -- 	JUMP   Div16s_loop
           16D : 0977;  -- 	LOAD   d16sN
           16E : 117D;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           16F : 0979;  -- 	LOAD   d16sS        ; check the sign indicator
           170 : 3172;  -- 	JNEG   Div16s_neg
           171 : 8800;  -- 	RETURN
           172 : 097D;  -- 	LOAD   dres16sQ     ; need to negate the result
           173 : 59EE;  -- 	XOR    NegOne
           174 : 6801;  -- 	ADDI   1
           175 : 117D;  -- 	STORE  dres16sQ
           176 : 8800;  -- 	RETURN	
           177 : 0000;  -- d16sN: DW 0 ; numerator
           178 : 0000;  -- d16sD: DW 0 ; denominator
           179 : 0000;  -- d16sS: DW 0 ; sign value
           17A : 0000;  -- d16sT: DW 0 ; temp counter
           17B : 0000;  -- d16sC1: DW 0 ; carry value
           17C : 0000;  -- d16sC2: DW 0 ; carry value
           17D : 0000;  -- dres16sQ: DW 0 ; quotient result
           17E : 0000;  -- dres16sR: DW 0 ; remainder result
           17F : 3982;  -- 	JPOS   Abs_r
           180 : 59EE;  -- 	XOR    NegOne       ; Flip all bits
           181 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           182 : 8800;  -- 	RETURN
           183 : 3188;  -- 	JNEG   Mod180n      ; handle negatives
           184 : 6F4C;  -- 	ADDI   -180
           185 : 3984;  -- 	JPOS   Mod180p      ; subtract 180 until negative
           186 : 68B4;  -- 	ADDI   180          ; go back positive
           187 : 8800;  -- 	RETURN
           188 : 68B4;  -- 	ADDI   180          ; add 180 until positive
           189 : 3188;  -- 	JNEG   Mod180n
           18A : 6F4C;  -- 	ADDI   -180         ; go back negative
           18B : 8800;  -- 	RETURN
           18C : 0997;  -- 	LOAD a2
           18D : 2196;  -- 	SUB a1
           18E : 1116;  -- 	STORE AtanX
           18F : 09F0;  -- 	LOAD Zero
           190 : 0999;  -- 	LOAD b2
           191 : 2198;  -- 	SUB b1
           192 : 1117;  -- 	STORE AtanY
           193 : 80B5;  -- 	CALL Atan2
           194 : 119A;  -- 	STORE degValue
           195 : 8800;  -- 	Return
           196 : 0000;  -- a1: DW 0
           197 : 0000;  -- a2: DW 0
           198 : 0000;  -- b1: DW 0
           199 : 0000;  -- b2: DW 0 
           19A : 0000;  -- degValue: DW 0
           19B : 0000;  -- distValue: DW 0
           19C : 0997;  -- 	LOAD a2
           19D : 2196;  -- 	SUB a1
           19E : 11D0;  -- 	STORE L2X
           19F : 09F0;  -- 	LOAD Zero
           1A0 : 0999;  -- 	LOAD b2
           1A1 : 2198;  -- 	SUB b1
           1A2 : 11D1;  -- 	STORE L2Y
           1A3 : 81A6;  -- 	CALL L2Estimate
           1A4 : 119B;  -- 	STORE distValue
           1A5 : 8800;  -- 	Return
           1A6 : 09D0;  -- 	LOAD   L2X
           1A7 : 817F;  -- 	CALL   Abs
           1A8 : 11D2;  -- 	STORE  L2T1
           1A9 : 09D1;  -- 	LOAD   L2Y
           1AA : 817F;  -- 	CALL   Abs
           1AB : 21D2;  -- 	SUB    L2T1
           1AC : 31C8;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1AD : 19D2;  -- 	ADD    L2T1
           1AE : 113F;  -- 	STORE  m16sa
           1AF : 0A03;  -- 	LOAD   twofoursix       ; max * 246
           1B0 : 1140;  -- 	STORE  m16sB
           1B1 : 811C;  -- 	CALL   Mult16s
           1B2 : 0944;  -- 	LOAD   mres16sH
           1B3 : 6008;  -- 	SHIFT  8
           1B4 : 11D3;  -- 	STORE  L2T2
           1B5 : 0943;  -- 	LOAD   mres16sL
           1B6 : 6018;  -- 	SHIFT  -8        ; / 256
           1B7 : 4A0D;  -- 	AND    LowByte
           1B8 : 51D3;  -- 	OR     L2T2
           1B9 : 11D4;  -- 	STORE  L2T3
           1BA : 09D2;  -- 	LOAD   L2T1
           1BB : 113F;  -- 	STORE  m16sa
           1BC : 0A02;  -- 	LOAD   onezerofour       ; min * 104
           1BD : 1140;  -- 	STORE  m16sB
           1BE : 811C;  -- 	CALL   Mult16s
           1BF : 0944;  -- 	LOAD   mres16sH
           1C0 : 6008;  -- 	SHIFT  8
           1C1 : 11D3;  -- 	STORE  L2T2
           1C2 : 0943;  -- 	LOAD   mres16sL
           1C3 : 6018;  -- 	SHIFT  -8        ; / 256
           1C4 : 4A0D;  -- 	AND    LowByte
           1C5 : 51D3;  -- 	OR     L2T2
           1C6 : 19D4;  -- 	ADD    L2T3     ; sum
           1C7 : 8800;  -- 	RETURN
           1C8 : 19D2;  -- 	ADD    L2T1
           1C9 : 11D3;  -- 	STORE  L2T2
           1CA : 09D2;  -- 	LOAD   L2T1
           1CB : 11D4;  -- 	STORE  L2T3
           1CC : 09D3;  -- 	LOAD   L2T2
           1CD : 11D2;  -- 	STORE  L2T1
           1CE : 09D4;  -- 	LOAD   L2T3
           1CF : 29AE;  -- 	JUMP   CalcDist
           1D0 : 0000;  -- L2X:  DW 0
           1D1 : 0000;  -- L2Y:  DW 0
           1D2 : 0000;  -- L2T1: DW 0
           1D3 : 0000;  -- L2T2: DW 0
           1D4 : 0000;  -- L2T3: DW 0
           1D5 : 0000;  -- Temp:  DW 0 ; "Temp" is not a great name, but can be useful
           1D6 : 0000;  -- Temp2: DW 0
           1D7 : 0000;  -- Temp3: DW 0
           1D8 : 0000;  -- CDX: DW 0      ; current desired X
           1D9 : 0000;  -- CDY: DW 0      ; current desired Y
           1DA : 0000;  -- CDT: DW 0      ; current desired angle
           1DB : 0000;  -- CX:  DW 0      ; sampled X
           1DC : 0000;  -- CY:  DW 0      ; sampled Y
           1DD : 0000;  -- CT:  DW 0      ; sampled theta
           1DE : 0000;  -- xDest:	DW 0
           1DF : 0000;  -- yDest:	DW 0
           1E0 : 0000;  -- Order:  DW 0
           1E1 : 0000;  -- currT:	DW 0
           1E2 : 0000;  -- AngErr:	DW 0
           1E3 : 0000;  -- posiErr: DW 0
           1E4 : 0000;  -- dist:	DW 0
           1E5 : 0000;  -- currX:	DW 0
           1E6 : 0000;  -- currY:	DW 0
           1E7 : 0000;  -- Turn: DW 0
           1E8 : 0000;  -- PtrX: DW 0
           1E9 : 0000;  -- PtrY: DW 0
           1EA : 0000;  -- PtrOrder:  DW 0
           1EB : FFD3;  -- Neg45:		DW -45
           1EC : FFF5;  -- NegEleven:	DW -11
           1ED : FFFB;  -- negfive:	DW -5
           1EE : FFFF;  -- NegOne:   DW -1
           1EF : 0000;  -- NegOneHalf:	DW -.5
           1F0 : 0000;  -- Zero:     DW 0
           1F1 : 0000;  -- OneHalf:	DW .5
           1F2 : 0001;  -- One:      DW 1
           1F3 : 0002;  -- Two:      DW 2
           1F4 : 0003;  -- Three:    DW 3
           1F5 : 0004;  -- Four:     DW 4
           1F6 : 0005;  -- Five:     DW 5
           1F7 : 0006;  -- Six:      DW 6
           1F8 : 0007;  -- Seven:    DW 7
           1F9 : 0008;  -- Eight:    DW 8
           1FA : 0009;  -- Nine:     DW 9
           1FB : 000A;  -- Ten:      DW 10
           1FC : 000B;  -- Eleven:	  DW 11
           1FD : 0010;  -- Sixteen:	  DW 16
           1FE : 0011;  -- Seventeen: DW 17
           1FF : 002D;  -- FortyFive:	DW 45
           200 : 0032;  -- Fifty:	  DW 50
           201 : 0064;  -- OneHundred:	DW 100
           202 : 0068;  -- onezerofour: DW 104
           203 : 00F6;  -- twofoursix: DW 246
           204 : 05C8;  -- yintercept:	DW 1480
           205 : 0001;  -- Mask0:    DW &B00000001
           206 : 0002;  -- Mask1:    DW &B00000010
           207 : 0004;  -- Mask2:    DW &B00000100
           208 : 0008;  -- Mask3:    DW &B00001000
           209 : 0010;  -- Mask4:    DW &B00010000
           20A : 0020;  -- Mask5:    DW &B00100000
           20B : 0040;  -- Mask6:    DW &B01000000
           20C : 0080;  -- Mask7:    DW &B10000000
           20D : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           20E : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           20F : 03B8;  -- OneMeter: DW 952       ; ~1m in 1.05mm units
           210 : 01DC;  -- HalfMeter: DW 476      ; ~0.5m in 1.05mm units
           211 : 0122;  -- OneFoot:  DW 290       ; ~1ft in 1.05mm robot units
           212 : 0245;  -- TwoFeet:  DW 581       ; ~2ft in 1.05mm units
           213 : 0018;  -- TwoFeetInches: DW 24
           214 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           215 : 00B4;  -- Deg180:   DW 180       ; 180
           216 : 010E;  -- Deg270:   DW 270       ; 270
           217 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           218 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           219 : FF9C;  -- RSlow:    DW -100
           21A : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           21B : FEA2;  -- RMid:     DW -350
           21C : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           21D : FE0C;  -- RFast:    DW -500
           21E : 006E;  -- MinBatt:  DW 110       ; 13.0V - minimum safe battery voltage
           21F : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           220 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           221 : 0008;  -- AdjMatrix: DW 8, 7, 3, 4, 5
           222 : 0002;  -- DestArray: DW 2
  END;
